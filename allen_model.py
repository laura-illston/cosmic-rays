## Modelling signals for air-shower radio-pulses using Allen formula

import math
import numpy as np
import matplotlib.pyplot as plt
import matplotlib.patches as mpatches

lower_detector_threshold = 5 #Lowest electric field dectector can detect (microV/m)
upper_detector_threshold = 25 #Electric field dectector is certain to detect (microV/m)
bandwidth = 2 #Bandwidth of detector in MHz

year_in_s = 60*60*24*365 #Approximate number of seconds in a year 
obs_period = year_in_s #Observation period (in s) that detector is running, needed
		       #to compute probability of detecting cosmic rays
obs_area = 1000*1000 #Area over which we expect to be able to observe cosmic rays (m^2)

#Input primary particle energy E_p (eV), output is flux ( (m**2 sr s GeV)**-1 )
def flux_primary(E_p):
  if E_p < 10**9:
    return 10**4
  elif E_p <= 10**16:
    return (10**4)*(E_p/10**9)**(-2.7) 
  else:
    return (10**6.8)*(E_p/10**9)**(-3.1)

#Inputs primary particle energy E_p (eV), time (s), area (m^2) 
#Returns the expected (average) number of particles of energy E_p that you would expect to 
#observe over that area during the observation time per steradian (sr).
def expected_num_particles_per_sr(E_p,time,area):
  flux = flux_primary(E_p)
  num_per_sr = flux*time*area*(E_p/10**9)
  return num_per_sr

#There are 2*pi steradians (sr) in a hemisphere
#Inputs primary particle energy E_p (eV), time (s), area (m^2) 
#Returns the expected (average) number of particles of energy E_p that you would expect to 
#observe over that area during the observation time.
def expected_num_particles(E_p,time,area):
  num_per_sr = expected_num_particles_per_sr(E_p,time,area)
  return num_per_sr*(2*np.pi)

#Input is the electric field generated by an air shower, given that such a shower has occured.
#Output is the probability that the detector will be able to detect such a signal over noise (a
#property of the detector).
def prob_detection_signal(E_field):
  if E_field < lower_detector_threshold:
    return 0.0
  elif E_field < upper_detector_threshold:
    return (1.0/(upper_detector_threshold-lower_detector_threshold))*(E_field-lower_detector_threshold) 
  else:
    return 1.0

#Uses Allen Formula to calculate the electric field from an air shower with the parameters: 
#(x,y) - coordinates of lateral distance, R_0 - a frequency and zenith-angle dependent parameter, 
#zenith- zenith angle of shower axis, geo_angle- angle between shower axis and local magnetic field, 
#E_p - energy of primary cosmic ray.
#Returns the likelihood of the detector detecting an electric field of this magnitude, given that
#such a field has been produced by an air shower.
def prob_detection_field(x,y,R_0,zenith,geo_angle,E_p):
  R = math.sqrt(x**2 + y**2)
  E_field = bandwidth*20*(E_p/10**17)*np.sin(np.radians(geo_angle))*np.cos(np.radians(zenith))*np.exp(-R/R_0)
  return prob_detection_signal(np.abs(E_field))
